@page
@model ContosoUniversity.Pages.Departments.IndexModel
@using System.Text.Json;

@{
    ViewData["Title"] = "Departments";
}
<style>
    /* CSS for the chart canvas */
    #departmentChart {
        width: 100% !important;
        max-width: 600px;
        height: 300px; 
        margin: 0 auto;
    }
    .button-link {
        display: inline-block;
        padding: 10px 15px;
        background-color: #007bff;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }

    .button-link:hover {
        background-color: #0056b3;
    }
</style>

<h1>Departments</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name, budget, or start date:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Departments[0].Name)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.BudgetSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Departments[0].Budget)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Departments[0].StartDate)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Departments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Budget)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDate)
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.DepartmentID">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.DepartmentID">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.DepartmentID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Departments.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Departments.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Departments.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Departments.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>

<canvas id="departmentChart" width="400" height="300"></canvas> <!-- Smaller size -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Get the department names and start dates from the Razor Page Model
    var departmentNames = @Html.Raw(JsonSerializer.Serialize(Model.DepartmentNames)); // X-axis: Department names
    var departmentStartDates = @Html.Raw(JsonSerializer.Serialize(Model.DepartmentStartDates)); // Y-axis: Start Dates

    // Convert the department start dates to Unix timestamps (numeric values)
    departmentStartDates = departmentStartDates.map(function(date) {
        var d = new Date(date); // Create Date object
        return d.getTime(); // Convert to Unix timestamp (milliseconds since epoch)
    });

    // Create a chart using Chart.js
    var ctx = document.getElementById('departmentChart').getContext('2d');
    var departmentChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: departmentNames, // Department names
            datasets: [{
                label: 'Department Start Date',
                data: departmentStartDates, // Unix timestamps
                backgroundColor: 'rgba(75, 192, 192, 0.6)', // Bar color
                borderColor: 'rgba(75, 192, 192, 1)', // Border color
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            // Convert Unix timestamp back to readable date format
                            var date = new Date(value);
                            return date.toISOString().split('T')[0]; // Show in "YYYY-MM-DD" format
                        }
                    }
                }
            }
        }
    });
</script>
